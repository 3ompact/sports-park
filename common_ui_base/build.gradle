plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'

}

android {
    compileSdkVersion rootProject.ext.versions.compileSdkVersion
    buildToolsVersion rootProject.ext.versions.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.versions.minsdkVersion
        targetSdkVersion rootProject.ext.versions.targetSdkVersion
        versionCode rootProject.ext.versions.versionCode
        versionName rootProject.ext.versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            libraryVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "${variant.versionName}_${releaseTime()}_${variant.name}.apk"
                        outputFileName = fileName
                    }
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = rootProject.ext.versions.jvmTargetVersion
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    productFlavors {

        all {
            manifestPlaceholders = [
                    NAME_CHANNEL: "all"
            ]
        }
    }
}

def releaseTime() {
    return new Date().format("MMdd", TimeZone.getTimeZone("UTC"))
}

dependencies {


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    api rootProject.ext.dependencies["viewmodel"]
    api rootProject.ext.dependencies["livedata"]
    api rootProject.ext.dependencies["lifecycleRuntimeKtx"]

    //banner
    api rootProject.ext.dependencies["banner"]


    api rootProject.ext.dependencies["material"]

    // Annotation processor
    kapt rootProject.ext.dependencies["lifecycleCompile"]
    // Lifecycles only (without ViewModel or LiveData)
    api(rootProject.ext.dependencies["lifecycleRuntimeKtx"]) {
        exclude group: 'org.jetbrains.kotlinx', module: 'kotlinx-coroutines-android'
    }

    api rootProject.ext.dependencies["baseRecyclerViewAdapterHelper"]


    api rootProject.ext.dependencies["constraintLayout"]

    //Arouter相关配置
    api rootProject.ext.dependencies["arouter"]
    kapt rootProject.ext.dependencies["arouterKapt"]

    api rootProject.ext.dependencies["qmui"]
    api rootProject.ext.dependencies["qmuiArch"]
    kapt rootProject.ext.dependencies["qmuiKapt"]

    //coroutines
    api rootProject.ext.dependencies["coroutines"]

    //coil 图片加载库
    api (rootProject.ext.dependencies["coil"]) {
        exclude group: 'com.squareuo.okhttp3', module: 'okhttp'
    }


    api rootProject.ext.dependencies["ratingBar"]


    api project(':basics_lib')


}